#!/usr/bin/env bash
#
# rwahs/tasks/deploy - Function definitions for "deploy" task.
#

set -e
set -u

function deploy_showHelp {
    local programName toolsDir

    # Function arguments
    programName="${1}"
    toolsDir="${2}"
    shift 2

    echo
    echo "Transfer the specified release to the specified environment and update the environment to make the specified"
    echo "release the 'current' version in the given environment."
    echo
    echo "USAGE:"
    echo "    ${programName} deploy [-e <environment>] -c <component> [-b | -r <release>]"
    echo
    echo "WHERE:"
    echo "    -c <component> gives the name of the component to process."
    echo "         Valid values: $(ls -m "${toolsDir}/config/${programName}/components")"
    echo "    -e <environment> gives the name of the environment to deploy into."
    echo "         Valid values: $(ls -m "${toolsDir}/config/${programName}/env")"
    echo "    -b indicates that a new release should be built"
    echo "    -r <release> gives the release tag to deploy (required for \`deploy\` task)"
    echo
    echo "If neither -b nor -r are given, then the latest release available will be used."
}

function deploy_runTask {
    local programName toolsDir component environment buildRelease releaseName targetPath targetSymlinkPath error
    local repo repoDefaultTargetCommitish targetParent
    local host user targetRoot localSettingsRoot localStorageRoot adminEmailAddress

    # Function arguments
    programName="${1}"
    toolsDir="${2}"
    shift 2

    # Default values
    environment=${RWAHS_ENV:-}

    # Parse parameters
    while getopts :c:e:br: parameter; do
        case "${parameter}" in
            c)
                component="${OPTARG}"
            ;;
            e)
                environment="${OPTARG}"
            ;;
            b)
                buildRelease=true
            ;;
            r)
                releaseName="${OPTARG}"
            ;;
            \?)
                echo "Error: Invalid option '-${OPTARG}' provided to the 'deploy' task." >&2
                deploy_showHelp "${programName}" "${toolsDir}" >&2
                exit 1
            ;;
            :)
                echo "Error: Option '-${OPTARG}' missing parameter value." >&2
                deploy_showHelp "${programName}" "${toolsDir}" >&2
                exit 1
            ;;
        esac
    done

    # Check for errors and required executables
    if [ ! -v component ]; then
        error="Required parameter 'component' not specified for 'deploy' task."
    elif [ ! -f "${toolsDir}/config/${programName}/components/${component}" ]; then
        error="Specified component '${component}' does not exist, see below for valid values."
    elif [ -z "${environment}" ]; then
        error="Required parameter 'environment' not specified for 'deploy' task and no 'RWAHS_ENV' value is set."
    elif [ ! -f "${toolsDir}/config/${programName}/env/${environment}" ]; then
        error="Specified environment '${environment}' does not exist, see below for valid values."
    elif [ ! $(command -v "curl") ]; then
        error="The 'curl' executable was not found and is required for the 'deploy' task; try 'apt-get install curl'."
    elif [ ! $(command -v "tar") ]; then
        error="The 'tar' executable was not found and is required for the 'deploy' task; try 'apt-get install tar'."
    fi

    # Display error and usage if any error occurred
    if [ -v error ]; then
        echo "${error}" >&2
        deploy_showHelp "${programName}" "${toolsDir}" >&2
        exit 1
    fi

    # Import the component settings, environment settings and GitHub API utility functions
    source "${toolsDir}/config/${programName}/components/${component}"
    source "${toolsDir}/config/${programName}/env/${environment}"
    source "${toolsDir}/include/util/github"

    # If a newly built release was requested, build it; don't set `releaseName` that will be picked up in the next step
    if [ -v buildRelease ]; then
        "${toolsDir}/bin/${programName}" build -c "${component}"
    fi

    # If we don't have a release name, then use the latest
    if [ ! -v releaseName ]; then
        releaseName="$(github_getLatestRelease ${RWAHS_ACCESS_TOKEN} ${repo})"
    fi

    # We now know what is being deployed, inform the user
    echo "Deploying release '${releaseName}'"

    # Run preDeploy hook, if defined
    if [ "$(type -t preDeploy)" == "function" ]; then
        echo "Running pre-deploy hook..."
        preDeploy "${targetRoot}" "${localSettingsRoot}" "${localStorageRoot}"
    fi

    # Do the work
    echo "Running 'deploy' task..."
    releaseUrl="https://github.com/${repo}/archive/release_${releaseName}.tar.gz"
    targetPath="${targetRoot}/${targetParent}/${releaseName}"
    targetSymlinkPath="${targetRoot}/${targetParent}/current"
    if [ -d "${targetPath}" ]; then
        echo "Target path '${targetPath}' already exists, skipping download and extraction of release archive."
    else
        mkdir --parents "${targetPath}"
        curl --location "${releaseUrl}" | tar --extract --gunzip --strip-components=1 --directory="${targetPath}"
    fi
    rm --force "${targetSymlinkPath}"
    ln --symbolic "${targetPath}" "${targetSymlinkPath}"

    # Run postDeploy hook, if defined
    if [ "$(type -t postDeploy)" == "function" ]; then
        echo "Running post-deploy hook..."
        postDeploy "${targetRoot}" "${localSettingsRoot}" "${localStorageRoot}"
    fi
}
