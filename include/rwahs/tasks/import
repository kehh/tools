#!/usr/bin/env bash
#
# rwahs/tasks/import - Function definitions for "import" task.
#

set -e
set -u

function import_showHelp {
    local programName toolsDir

    # Function arguments
    programName="${1}"
    toolsDir="${2}"
    shift 2

    echo
    echo "Run the import scripts, converting data from the legacy database format into the format required by"
    echo "CollectiveAccess, and inserting the data into the environment's database."
    echo
    echo "USAGE:"
    echo "    ${programName} build -e <environment> [-n]"
    echo
    echo "WHERE:"
    echo "    -e <environment> gives the name of the environment to import data into."
    echo "         Valid values: $(ls -m "${toolsDir}/config/${programName}/env")"
    echo "    -n indicates that the database should be cleared before importing (equivalent to running"
    echo "         \`${programName} nuke\` prior to importing)"
    echo
}

function import_runTask {
    local programName toolsDir environment nukeFirst error
    local repo repoDefaultTargetCommitish targetParent
    local host user targetRoot adminEmailAddress

    # Function arguments
    programName="${1}"
    toolsDir="${2}"
    shift 2

    # Default values
    environment=${RWAHS_ENV-}

    # Parse parameters
    while getopts :e:n parameter; do
        case "$parameter" in
            e)
                environment="${OPTARG}"
            ;;
            n)
                nukeFirst="true"
            ;;
            \?)
                echo "Error: Invalid option '-${OPTARG}' provided to the 'import' task." >&2
                import_showHelp "${programName}" "${toolsDir}" >&2
                exit 1
            ;;
            :)
                echo "Error: Option '-${OPTARG}' missing parameter value." >&2
                import_showHelp "${programName}" "${toolsDir}" >&2
                exit 1
            ;;
        esac
    done

    # Check for errors and required executables
    if [ ! -v environment ]; then
        error="Required parameter 'environment' not specified for 'import' task."
    elif [ ! -f "${toolsDir}/config/${programName}/env/${environment}" ]; then
        error="Specified environment '${environment}' does not exist, see below for valid values."
    fi

    # Display error and usage if any error occurred
    if [ -v error ]; then
        echo "${error}" >&2
        import_showHelp "${programName}" "${toolsDir}" >&2
        exit 1
    fi

    # Nuke first if requested
    if [ -v nukeFirst ]; then
        "${toolsDir}/bin/${programName}" nuke -e "${environment}"
    fi

    # Import the environment settings and the "importer" component settings
    source "${toolsDir}/config/${programName}/env/${environment}"
    source "${toolsDir}/config/${programName}/components/importer"

    # Do the work
    echo "Running 'import' task..."
    "${targetRoot}/${targetParent}/current/importAllData"
}
