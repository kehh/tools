#!/usr/bin/env bash
#
# rwahs: Royal WA Historical Society - integration and deployment script.
# See README.md or run `rwahs help` for usage.
#

set -e
set -u

# Show general usage instructions
function showHelp {
    local programName toolsDir

    # Function arguments
    programName="${1}"
    toolsDir="${2}"
    shift 2

    # Display general (command-level) help text
    echo
    echo "Royal WA Historical Society - integration and deployment script"
    echo
    echo "USAGE:"
    echo "    ${programName} <task> [-e <environment>] [-c <component>]"
    echo
    echo "WHERE:"
    echo "    <task> is the name of a task to perform: help, $(ls -m "${toolsDir}/include/${programName}/tasks")"
    echo "    -e <environment> gives the name of the environment to control remotely: $(ls -m "${toolsDir}/config/${programName}/env")"
    echo "    -c <component> gives the name of the component to process: $(ls -m "${toolsDir}/config/${programName}/components")"
    echo
    echo "NOTES:"
    echo "    1. If the -e option is omitted, the script will run locally"
    echo "    2. Not all tasks require or use the -e or -c options, however they are required for other tasks"
    echo "    3. Some tasks have additional options"
    echo
    echo "For more information on specific tasks, run ${programName} help <task>"
    echo
}

# Show task-specific usage instructions
function showTaskHelp {
    local programName toolsDir helpTask

    # Function arguments
    programName="${1}"
    toolsDir="${2}"
    helpTask="${3}"
    shift 3

    # Display task-specific help text
    if [ ! -f "${toolsDir}/include/${programName}/tasks/${helpTask}" ]; then
        echo "Requested help for unknown task '${helpTask}'; valid tasks are: $(ls -m "${toolsDir}/include/${programName}/tasks")"
        exit 1
    else
        source "${toolsDir}/include/${programName}/tasks/${helpTask}"
        ${helpTask}_showHelp "${programName}" "${toolsDir}"
    fi
}

# Retrieve the value of the `-e` option, which cannot be determined using `getopts` unless all possible options are
# listed in the option specifier string.  Output the value of the `-e` option for capture by calling function.
function getEnvironmentOption {
    while [ $# -gt 1 ]; do
        if [ "${1}" == "-e" ]; then
            echo "${2}"
            return
        fi
        shift
    done
}

# If the command should be executed remotely, output the full `ssh` command to execute, otherwise don't output anything
# to indicate that the command should proceed locally.
# If the command specifies an environment and it's not the same as the global `RWAHS_ENV`, then run the command
# remotely based on the given environment's configuration; otherwise run the command locally.
function getRemoteCommand {
    local programName toolsDir task environment
    local repo repoDefaultTargetCommitish targetParent
    local host user targetRoot localSettingsRoot adminEmailAddress

    # Function arguments
    programName="${1}"
    toolsDir="${2}"
    task="${3}"
    shift 3

    # Get the environment
    environment=$(getEnvironmentOption $@)

    # To run remotely, either `environment` and `RWAHS_ENV` are both
    if [ "${environment:-${RWAHS_ENV:-}}" != "${RWAHS_ENV:-}" ]; then
        # Include the tools component configuration, so we know where to run the command from.
        source "${toolsDir}/config/${programName}/components/tools"

        # Include the environment configuration for the SSH parameters.
        source "${toolsDir}/config/${programName}/env/${environment:-${RWAHS_ENV:-}}"

        # Output the command to run; this is captured by the calling function.
        echo ssh "${user}@${host}" "${targetRoot}/${targetParent}/current/bin/${programName} ${task} $@"
    fi
}

# Main sequence
function rwahsMain {
    local toolsDir programName task remoteCommand

    # Default values
    toolsDir=$(readlink -f $(dirname $(dirname ${0})))
    programName=$(basename ${0})
    task="help"

    # Read task, if not specified then assume "help"
    if [ $# -gt 0 ]; then
        task="${1}"
        shift
    fi

    # Process task
    if [ "${task}" == "help" ]; then
        # Show requested help
        if [ "$#" -eq 0 ]; then
            showHelp "${programName}" "${toolsDir}" >&2
        else
            showTaskHelp "${programName}" "${toolsDir}" "${1}" >&2
        fi
    else
        # Execute requested task
        if [ ! -f "${toolsDir}/include/${programName}/tasks/${task}" ]; then
            echo "Unknown task '${task}' specified, valid tasks are: $(ls -m "${toolsDir}/include/${programName}/tasks")" >&2
            exit 1
        else
            remoteCommand=$(getRemoteCommand "${programName}" "${toolsDir}" "${task}" $@)
            if [ -z "${remoteCommand}" ]; then
                source "${toolsDir}/include/${programName}/tasks/${task}"
                ${task}_runTask "${programName}" "${toolsDir}" $@
            else
                ${remoteCommand}
            fi
        fi
    fi
}

# Bootstrap
rwahsMain $@
